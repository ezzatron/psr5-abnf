// Generated by JavaScript APG, Version 2.0 [`apg-js2`](https://github.com/ldthomas/apg-js2)
module.exports = function(){
"use strict";

    //```
    // SUMMARY
    //      rules = 12
    //       udts = 0
    //    opcodes = 73
    //        ALT = 8
    //        CAT = 9
    //        RNM = 18
    //        UDT = 0
    //        REP = 6
    //        AND = 0
    //        NOT = 0
    //        TLS = 26
    //        TBS = 1
    //        TRG = 5
    // characters = [32 - 255]
    //```

    /* CALLBACK LIST PROTOTYPE (true, false or function reference) */
    this.callbacks = [];
    this.callbacks['alpha'] = false;
    this.callbacks['array'] = false;
    this.callbacks['array-expression'] = false;
    this.callbacks['class-name'] = false;
    this.callbacks['collection-type'] = false;
    this.callbacks['digit'] = false;
    this.callbacks['generic'] = false;
    this.callbacks['keyword'] = false;
    this.callbacks['label'] = false;
    this.callbacks['sp'] = false;
    this.callbacks['type'] = false;
    this.callbacks['type-expression'] = false;

    /* OBJECT IDENTIFIER (for internal parser use) */
    this.grammarObject = 'grammarObject';

    /* RULES */
    this.rules = [];
    this.rules[0] = {name: 'ALPHA', lower: 'alpha', index: 0};
    this.rules[1] = {name: 'DIGIT', lower: 'digit', index: 1};
    this.rules[2] = {name: 'SP', lower: 'sp', index: 2};
    this.rules[3] = {name: 'type-expression', lower: 'type-expression', index: 3};
    this.rules[4] = {name: 'type', lower: 'type', index: 4};
    this.rules[5] = {name: 'array', lower: 'array', index: 5};
    this.rules[6] = {name: 'array-expression', lower: 'array-expression', index: 6};
    this.rules[7] = {name: 'generic', lower: 'generic', index: 7};
    this.rules[8] = {name: 'collection-type', lower: 'collection-type', index: 8};
    this.rules[9] = {name: 'class-name', lower: 'class-name', index: 9};
    this.rules[10] = {name: 'label', lower: 'label', index: 10};
    this.rules[11] = {name: 'keyword', lower: 'keyword', index: 11};

    /* UDTS */
    this.udts = [];

    /* OPCODES */
    /* ALPHA */
    this.rules[0].opcodes = [];
    this.rules[0].opcodes[0] = {type: 1, children: [1,2]};// ALT
    this.rules[0].opcodes[1] = {type: 8, min: 65, max: 90};// TRG
    this.rules[0].opcodes[2] = {type: 8, min: 97, max: 122};// TRG

    /* DIGIT */
    this.rules[1].opcodes = [];
    this.rules[1].opcodes[0] = {type: 8, min: 48, max: 57};// TRG

    /* SP */
    this.rules[2].opcodes = [];
    this.rules[2].opcodes[0] = {type: 10, string: [32]};// TBS

    /* type-expression */
    this.rules[3].opcodes = [];
    this.rules[3].opcodes[0] = {type: 2, children: [1,2]};// CAT
    this.rules[3].opcodes[1] = {type: 4, index: 4};// RNM(type)
    this.rules[3].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
    this.rules[3].opcodes[3] = {type: 2, children: [4,5]};// CAT
    this.rules[3].opcodes[4] = {type: 9, string: [124]};// TLS
    this.rules[3].opcodes[5] = {type: 4, index: 4};// RNM(type)

    /* type */
    this.rules[4].opcodes = [];
    this.rules[4].opcodes[0] = {type: 1, children: [1,2]};// ALT
    this.rules[4].opcodes[1] = {type: 4, index: 9};// RNM(class-name)
    this.rules[4].opcodes[2] = {type: 4, index: 11};// RNM(keyword)

    /* array */
    this.rules[5].opcodes = [];
    this.rules[5].opcodes[0] = {type: 1, children: [1,6]};// ALT
    this.rules[5].opcodes[1] = {type: 2, children: [2,5]};// CAT
    this.rules[5].opcodes[2] = {type: 1, children: [3,4]};// ALT
    this.rules[5].opcodes[3] = {type: 4, index: 4};// RNM(type)
    this.rules[5].opcodes[4] = {type: 4, index: 6};// RNM(array-expression)
    this.rules[5].opcodes[5] = {type: 9, string: [91,93]};// TLS
    this.rules[5].opcodes[6] = {type: 4, index: 7};// RNM(generic)

    /* array-expression */
    this.rules[6].opcodes = [];
    this.rules[6].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
    this.rules[6].opcodes[1] = {type: 9, string: [40]};// TLS
    this.rules[6].opcodes[2] = {type: 4, index: 3};// RNM(type-expression)
    this.rules[6].opcodes[3] = {type: 9, string: [41]};// TLS

    /* generic */
    this.rules[7].opcodes = [];
    this.rules[7].opcodes[0] = {type: 2, children: [1,2,3,9,10]};// CAT
    this.rules[7].opcodes[1] = {type: 4, index: 8};// RNM(collection-type)
    this.rules[7].opcodes[2] = {type: 9, string: [60]};// TLS
    this.rules[7].opcodes[3] = {type: 3, min: 0, max: 1};// REP
    this.rules[7].opcodes[4] = {type: 2, children: [5,6,7]};// CAT
    this.rules[7].opcodes[5] = {type: 4, index: 3};// RNM(type-expression)
    this.rules[7].opcodes[6] = {type: 9, string: [44]};// TLS
    this.rules[7].opcodes[7] = {type: 3, min: 0, max: Infinity};// REP
    this.rules[7].opcodes[8] = {type: 4, index: 2};// RNM(SP)
    this.rules[7].opcodes[9] = {type: 4, index: 3};// RNM(type-expression)
    this.rules[7].opcodes[10] = {type: 9, string: [62]};// TLS

    /* collection-type */
    this.rules[8].opcodes = [];
    this.rules[8].opcodes[0] = {type: 1, children: [1,2]};// ALT
    this.rules[8].opcodes[1] = {type: 4, index: 9};// RNM(class-name)
    this.rules[8].opcodes[2] = {type: 9, string: [97,114,114,97,121]};// TLS

    /* class-name */
    this.rules[9].opcodes = [];
    this.rules[9].opcodes[0] = {type: 2, children: [1,3,4]};// CAT
    this.rules[9].opcodes[1] = {type: 3, min: 0, max: 1};// REP
    this.rules[9].opcodes[2] = {type: 9, string: [92]};// TLS
    this.rules[9].opcodes[3] = {type: 4, index: 10};// RNM(label)
    this.rules[9].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP
    this.rules[9].opcodes[5] = {type: 2, children: [6,7]};// CAT
    this.rules[9].opcodes[6] = {type: 9, string: [92]};// TLS
    this.rules[9].opcodes[7] = {type: 4, index: 10};// RNM(label)

    /* label */
    this.rules[10].opcodes = [];
    this.rules[10].opcodes[0] = {type: 2, children: [1,4]};// CAT
    this.rules[10].opcodes[1] = {type: 1, children: [2,3]};// ALT
    this.rules[10].opcodes[2] = {type: 4, index: 0};// RNM(ALPHA)
    this.rules[10].opcodes[3] = {type: 8, min: 127, max: 255};// TRG
    this.rules[10].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP
    this.rules[10].opcodes[5] = {type: 1, children: [6,7,8]};// ALT
    this.rules[10].opcodes[6] = {type: 4, index: 0};// RNM(ALPHA)
    this.rules[10].opcodes[7] = {type: 4, index: 1};// RNM(DIGIT)
    this.rules[10].opcodes[8] = {type: 8, min: 127, max: 255};// TRG

    /* keyword */
    this.rules[11].opcodes = [];
    this.rules[11].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]};// ALT
    this.rules[11].opcodes[1] = {type: 9, string: [97,114,114,97,121]};// TLS
    this.rules[11].opcodes[2] = {type: 9, string: [98,111,111,108]};// TLS
    this.rules[11].opcodes[3] = {type: 9, string: [99,97,108,108,97,98,108,101]};// TLS
    this.rules[11].opcodes[4] = {type: 9, string: [102,97,108,115,101]};// TLS
    this.rules[11].opcodes[5] = {type: 9, string: [102,108,111,97,116]};// TLS
    this.rules[11].opcodes[6] = {type: 9, string: [105,110,116]};// TLS
    this.rules[11].opcodes[7] = {type: 9, string: [109,105,120,101,100]};// TLS
    this.rules[11].opcodes[8] = {type: 9, string: [110,117,108,108]};// TLS
    this.rules[11].opcodes[9] = {type: 9, string: [111,98,106,101,99,116]};// TLS
    this.rules[11].opcodes[10] = {type: 9, string: [114,101,115,111,117,114,99,101]};// TLS
    this.rules[11].opcodes[11] = {type: 9, string: [115,101,108,102]};// TLS
    this.rules[11].opcodes[12] = {type: 9, string: [115,116,97,116,105,99]};// TLS
    this.rules[11].opcodes[13] = {type: 9, string: [115,116,114,105,110,103]};// TLS
    this.rules[11].opcodes[14] = {type: 9, string: [116,114,117,101]};// TLS
    this.rules[11].opcodes[15] = {type: 9, string: [118,111,105,100]};// TLS
    this.rules[11].opcodes[16] = {type: 9, string: [36,116,104,105,115]};// TLS
}

//```
// INPUT GRAMMAR FILE(s)
//
// ; ABNF rules used
// 
// ALPHA = %x41-5A / %x61-7A
// DIGIT = %x30-39
// SP    = %x20
// ; Type
// 
// type-expression  =  type *("|" type)
// type             =  class-name / keyword ; / array
// 
// ; Array
// 
// array            =  (type / array-expression) "[]" / generic
// array-expression =  "(" type-expression ")"
// 
// ; Generic
// 
// generic          =  collection-type "<" [type-expression "," *SP] type-expression ">"
// collection-type  =  class-name / "array"
// 
// ; Class name
// 
// class-name       =  ["\"] label *("\" label)
// label            =  (ALPHA / %x7F-FF) *(ALPHA / DIGIT / %x7F-FF)
// 
// ; Keywords
// 
// ; Until APG supports RFC 7405, we have to leave off case sensitivity prefixes
// 
// ; keyword          =  %s"array" / %s"bool" / %s"callable" / %s"false" / %s"float"
// ; keyword          =/ %s"int" / %s"mixed" / %s"null" / %s"object" / %s"resource"
// ; keyword          =/ %s"self" / %s"static" / %s"string" / %s"true" / %s"void"
// ; keyword          =/ %s"$this"
// 
// keyword          =  "array" / "bool" / "callable" / "false" / "float" / "int"
// keyword          =/ "mixed" / "null" / "object" / "resource" / "self" / "static"
// keyword          =/ "string" / "true" / "void" / "$this"
//```
