# Generated by JavaScript APG, Version 2.0 [`apg-js2`](https://github.com/ldthomas/apg-js2)

module.exports = ->
    'use strict'
    #```
    # SUMMARY
    #      rules = 12
    #       udts = 0
    #    opcodes = 73
    #        ALT = 8
    #        CAT = 9
    #        RNM = 18
    #        UDT = 0
    #        REP = 6
    #        AND = 0
    #        NOT = 0
    #        TLS = 10
    #        TBS = 17
    #        TRG = 5
    # characters = [32 - 255]
    #```

    ### CALLBACK LIST PROTOTYPE (true, false or function reference) ###

    @callbacks = []
    @callbacks['alpha'] = false
    @callbacks['array'] = false
    @callbacks['array-expression'] = false
    @callbacks['class-name'] = false
    @callbacks['collection-type'] = false
    @callbacks['digit'] = false
    @callbacks['generic'] = false
    @callbacks['keyword'] = false
    @callbacks['label'] = false
    @callbacks['sp'] = false
    @callbacks['type'] = false
    @callbacks['type-expression'] = false

    ### OBJECT IDENTIFIER (for internal parser use) ###

    @grammarObject = 'grammarObject'

    ### RULES ###

    @rules = []
    @rules[0] =
        name: 'ALPHA'
        lower: 'alpha'
        index: 0
    @rules[1] =
        name: 'DIGIT'
        lower: 'digit'
        index: 1
    @rules[2] =
        name: 'SP'
        lower: 'sp'
        index: 2
    @rules[3] =
        name: 'type-expression'
        lower: 'type-expression'
        index: 3
    @rules[4] =
        name: 'type'
        lower: 'type'
        index: 4
    @rules[5] =
        name: 'array'
        lower: 'array'
        index: 5
    @rules[6] =
        name: 'array-expression'
        lower: 'array-expression'
        index: 6
    @rules[7] =
        name: 'generic'
        lower: 'generic'
        index: 7
    @rules[8] =
        name: 'collection-type'
        lower: 'collection-type'
        index: 8
    @rules[9] =
        name: 'class-name'
        lower: 'class-name'
        index: 9
    @rules[10] =
        name: 'label'
        lower: 'label'
        index: 10
    @rules[11] =
        name: 'keyword'
        lower: 'keyword'
        index: 11

    ### UDTS ###

    @udts = []

    ### OPCODES ###

    ### ALPHA ###

    @rules[0].opcodes = []
    @rules[0].opcodes[0] =
        type: 1
        children: [
            1
            2
        ]
    # ALT
    @rules[0].opcodes[1] =
        type: 8
        min: 65
        max: 90
    # TRG
    @rules[0].opcodes[2] =
        type: 8
        min: 97
        max: 122
    # TRG

    ### DIGIT ###

    @rules[1].opcodes = []
    @rules[1].opcodes[0] =
        type: 8
        min: 48
        max: 57
    # TRG

    ### SP ###

    @rules[2].opcodes = []
    @rules[2].opcodes[0] =
        type: 10
        string: [ 32 ]
    # TBS

    ### type-expression ###

    @rules[3].opcodes = []
    @rules[3].opcodes[0] =
        type: 2
        children: [
            1
            2
        ]
    # CAT
    @rules[3].opcodes[1] =
        type: 4
        index: 4
    # RNM(type)
    @rules[3].opcodes[2] =
        type: 3
        min: 0
        max: Infinity
    # REP
    @rules[3].opcodes[3] =
        type: 2
        children: [
            4
            5
        ]
    # CAT
    @rules[3].opcodes[4] =
        type: 9
        string: [ 124 ]
    # TLS
    @rules[3].opcodes[5] =
        type: 4
        index: 4
    # RNM(type)

    ### type ###

    @rules[4].opcodes = []
    @rules[4].opcodes[0] =
        type: 1
        children: [
            1
            2
        ]
    # ALT
    @rules[4].opcodes[1] =
        type: 4
        index: 9
    # RNM(class-name)
    @rules[4].opcodes[2] =
        type: 4
        index: 11
    # RNM(keyword)

    ### array ###

    @rules[5].opcodes = []
    @rules[5].opcodes[0] =
        type: 1
        children: [
            1
            6
        ]
    # ALT
    @rules[5].opcodes[1] =
        type: 2
        children: [
            2
            5
        ]
    # CAT
    @rules[5].opcodes[2] =
        type: 1
        children: [
            3
            4
        ]
    # ALT
    @rules[5].opcodes[3] =
        type: 4
        index: 4
    # RNM(type)
    @rules[5].opcodes[4] =
        type: 4
        index: 6
    # RNM(array-expression)
    @rules[5].opcodes[5] =
        type: 9
        string: [
            91
            93
        ]
    # TLS
    @rules[5].opcodes[6] =
        type: 4
        index: 7
    # RNM(generic)

    ### array-expression ###

    @rules[6].opcodes = []
    @rules[6].opcodes[0] =
        type: 2
        children: [
            1
            2
            3
        ]
    # CAT
    @rules[6].opcodes[1] =
        type: 9
        string: [ 40 ]
    # TLS
    @rules[6].opcodes[2] =
        type: 4
        index: 3
    # RNM(type-expression)
    @rules[6].opcodes[3] =
        type: 9
        string: [ 41 ]
    # TLS

    ### generic ###

    @rules[7].opcodes = []
    @rules[7].opcodes[0] =
        type: 2
        children: [
            1
            2
            3
            9
            10
        ]
    # CAT
    @rules[7].opcodes[1] =
        type: 4
        index: 8
    # RNM(collection-type)
    @rules[7].opcodes[2] =
        type: 9
        string: [ 60 ]
    # TLS
    @rules[7].opcodes[3] =
        type: 3
        min: 0
        max: 1
    # REP
    @rules[7].opcodes[4] =
        type: 2
        children: [
            5
            6
            7
        ]
    # CAT
    @rules[7].opcodes[5] =
        type: 4
        index: 3
    # RNM(type-expression)
    @rules[7].opcodes[6] =
        type: 9
        string: [ 44 ]
    # TLS
    @rules[7].opcodes[7] =
        type: 3
        min: 0
        max: Infinity
    # REP
    @rules[7].opcodes[8] =
        type: 4
        index: 2
    # RNM(SP)
    @rules[7].opcodes[9] =
        type: 4
        index: 3
    # RNM(type-expression)
    @rules[7].opcodes[10] =
        type: 9
        string: [ 62 ]
    # TLS

    ### collection-type ###

    @rules[8].opcodes = []
    @rules[8].opcodes[0] =
        type: 1
        children: [
            1
            2
        ]
    # ALT
    @rules[8].opcodes[1] =
        type: 4
        index: 9
    # RNM(class-name)
    @rules[8].opcodes[2] =
        type: 9
        string: [
            97
            114
            114
            97
            121
        ]
    # TLS

    ### class-name ###

    @rules[9].opcodes = []
    @rules[9].opcodes[0] =
        type: 2
        children: [
            1
            3
            4
        ]
    # CAT
    @rules[9].opcodes[1] =
        type: 3
        min: 0
        max: 1
    # REP
    @rules[9].opcodes[2] =
        type: 9
        string: [ 92 ]
    # TLS
    @rules[9].opcodes[3] =
        type: 4
        index: 10
    # RNM(label)
    @rules[9].opcodes[4] =
        type: 3
        min: 0
        max: Infinity
    # REP
    @rules[9].opcodes[5] =
        type: 2
        children: [
            6
            7
        ]
    # CAT
    @rules[9].opcodes[6] =
        type: 9
        string: [ 92 ]
    # TLS
    @rules[9].opcodes[7] =
        type: 4
        index: 10
    # RNM(label)

    ### label ###

    @rules[10].opcodes = []
    @rules[10].opcodes[0] =
        type: 2
        children: [
            1
            4
        ]
    # CAT
    @rules[10].opcodes[1] =
        type: 1
        children: [
            2
            3
        ]
    # ALT
    @rules[10].opcodes[2] =
        type: 4
        index: 0
    # RNM(ALPHA)
    @rules[10].opcodes[3] =
        type: 8
        min: 127
        max: 255
    # TRG
    @rules[10].opcodes[4] =
        type: 3
        min: 0
        max: Infinity
    # REP
    @rules[10].opcodes[5] =
        type: 1
        children: [
            6
            7
            8
        ]
    # ALT
    @rules[10].opcodes[6] =
        type: 4
        index: 0
    # RNM(ALPHA)
    @rules[10].opcodes[7] =
        type: 4
        index: 1
    # RNM(DIGIT)
    @rules[10].opcodes[8] =
        type: 8
        min: 127
        max: 255
    # TRG

    ### keyword ###

    @rules[11].opcodes = []
    @rules[11].opcodes[0] =
        type: 1
        children: [
            1
            2
            3
            4
            5
            6
            7
            8
            9
            10
            11
            12
            13
            14
            15
            16
        ]
    # ALT
    @rules[11].opcodes[1] =
        type: 10
        string: [
            97
            114
            114
            97
            121
        ]
    # TBS
    @rules[11].opcodes[2] =
        type: 10
        string: [
            98
            111
            111
            108
        ]
    # TBS
    @rules[11].opcodes[3] =
        type: 10
        string: [
            99
            97
            108
            108
            97
            98
            108
            101
        ]
    # TBS
    @rules[11].opcodes[4] =
        type: 10
        string: [
            102
            97
            108
            115
            101
        ]
    # TBS
    @rules[11].opcodes[5] =
        type: 10
        string: [
            102
            108
            111
            97
            116
        ]
    # TBS
    @rules[11].opcodes[6] =
        type: 10
        string: [
            105
            110
            116
        ]
    # TBS
    @rules[11].opcodes[7] =
        type: 10
        string: [
            109
            105
            120
            101
            100
        ]
    # TBS
    @rules[11].opcodes[8] =
        type: 10
        string: [
            110
            117
            108
            108
        ]
    # TBS
    @rules[11].opcodes[9] =
        type: 10
        string: [
            111
            98
            106
            101
            99
            116
        ]
    # TBS
    @rules[11].opcodes[10] =
        type: 10
        string: [
            114
            101
            115
            111
            117
            114
            99
            101
        ]
    # TBS
    @rules[11].opcodes[11] =
        type: 10
        string: [
            115
            101
            108
            102
        ]
    # TBS
    @rules[11].opcodes[12] =
        type: 10
        string: [
            115
            116
            97
            116
            105
            99
        ]
    # TBS
    @rules[11].opcodes[13] =
        type: 10
        string: [
            115
            116
            114
            105
            110
            103
        ]
    # TBS
    @rules[11].opcodes[14] =
        type: 10
        string: [
            116
            114
            117
            101
        ]
    # TBS
    @rules[11].opcodes[15] =
        type: 10
        string: [
            118
            111
            105
            100
        ]
    # TBS
    @rules[11].opcodes[16] =
        type: 10
        string: [
            36
            116
            104
            105
            115
        ]
    # TBS
    return

#```
# INPUT GRAMMAR FILE(s)
#
# ; ABNF rules used
# 
# ALPHA = %x41-5A / %x61-7A
# DIGIT = %x30-39
# SP    = %x20
# ; IMPORTANT: Case sensitivity
# 
# ; Without RFC 7405 support in the parser generator, we have to leave off case
# ; sensitivity prefixes, and everything should really be defined using %d, but
# ; APG is wrongly interpreting values as case-sensitive anyway, so for the
# ; purposes of this document, "a" actually means %s"a", and this should be
# ; reflected in any related specification documents.
# 
# ; Type
# 
# type-expression  =  type *("|" type)
# type             =  class-name / keyword ; / array
# 
# ; Array
# 
# array            =  (type / array-expression) "[]" / generic
# array-expression =  "(" type-expression ")"
# 
# ; Generic
# 
# generic          =  collection-type "<" [type-expression "," *SP] type-expression ">"
# collection-type  =  class-name / "array"
# 
# ; collection-type  =  class-name / %s"array"
# 
# ; Class name
# 
# class-name       =  ["\"] label *("\" label)
# label            =  (ALPHA / %x7F-FF) *(ALPHA / DIGIT / %x7F-FF)
# 
# ; Keywords
# 
# keyword          =  %s"array" / %s"bool" / %s"callable" / %s"false" / %s"float"
# keyword          =/ %s"int" / %s"mixed" / %s"null" / %s"object" / %s"resource"
# keyword          =/ %s"self" / %s"static" / %s"string" / %s"true" / %s"void"
# keyword          =/ %s"$this"
#```
